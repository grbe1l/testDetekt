object Versions {
    const val kotlin = "1.3.72"
    const val detekt = "1.9.0"
    const val shadow = "5.2.0"
    const val kotlinxSerialization = "0.20.0"
    const val ktor = "1.3.2"
    const val kotlinLogging = "1.7.9"
    const val hikariCp = "3.4.2"
    const val kotlinJdbc = "0.5.2"
    const val kotlinCliJvm = "0.2.0-dev-6"
    const val clouderaJdbc = "2.5.31"
    const val oracleJdbc = "19.3.0.0"
    const val hiveService = "1.1.0"
    const val logbackClassic = "1.2.3"
    const val logbackJsonClassic = "0.1.5"
    const val logbackJackson = "0.1.5"
    const val jacksonDatabind = "2.10.1"
    const val kotest = "4.0.5"
    const val slf4jTest = "1.2.0"
    const val oracleSpatialGeometry = "10.2.0.1"
    const val arrow = "0.10.4"
    const val jsonAssert = "1.5.0"
    const val xmlUnit = "2.6.3"
    const val assertJ = "2.9.1"
    const val xerces = "2.12.0"
}

object Plugins {
    const val shadow = "com.github.johnrengelman.shadow"
    const val detekt = "io.gitlab.arturbosch.detekt"
    const val allopen = "org.jetbrains.kotlin.plugin.allopen"
    const val noarg = "org.jetbrains.kotlin.plugin.noarg"
}

object Deps {
    // Implementation
    const val ktorJetty = "io.ktor:ktor-server-jetty:${Versions.ktor}"
    const val ktorServerCore = "io.ktor:ktor-server-core:${Versions.ktor}"
    const val ktorSerialization = "io.ktor:ktor-serialization:${Versions.ktor}"
    const val ktorLocations = "io.ktor:ktor-locations:${Versions.ktor}"
    const val kotlinStdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${Versions.kotlin}"
    const val kotlinxSerialization =
        "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${Versions.kotlinxSerialization}"
    const val kotlinLogging = "io.github.microutils:kotlin-logging:${Versions.kotlinLogging}"
    const val hikariCp = "com.zaxxer:HikariCP:${Versions.hikariCp}"
    const val kotlinJdbc = "com.vladsch.kotlin-jdbc:kotlin-jdbc:${Versions.kotlinJdbc}"
    const val kotlinCliJvm = "org.jetbrains.kotlinx:kotlinx-cli-jvm:${Versions.kotlinCliJvm}"
    const val arrowCore = "io.arrow-kt:arrow-core:${Versions.arrow}"
    const val arrowSyntax = "io.arrow-kt:arrow-syntax:${Versions.arrow}"
    const val arrowMeta = "io.arrow-kt:arrow-meta:${Versions.arrow}"
    const val jacksonDatabind = "com.fasterxml.jackson.core:jackson-databind:${Versions.jacksonDatabind}"
    const val xerces = "xerces:xercesImpl:${Versions.xerces}"

    // Runtime & plugins
    const val clouderaJdbc = "com.cloudera.impala:jdbc:${Versions.clouderaJdbc}"
    const val oracleJdbc = "com.oracle.ojdbc:ojdbc8:${Versions.oracleJdbc}"
    const val hiveService = "org.apache.hive:hive-service:${Versions.hiveService}"
    const val logbackClassic = "ch.qos.logback:logback-classic:${Versions.logbackClassic}"
    const val logbackJsonClassic = "ch.qos.logback.contrib:logback-json-classic:${Versions.logbackJsonClassic}"
    const val logbackJackson = "ch.qos.logback.contrib:logback-jackson:${Versions.logbackJackson}"
    const val detektFormatting = "io.gitlab.arturbosch.detekt:detekt-formatting:${Versions.detekt}"
    const val detektCli = "io.gitlab.arturbosch.detekt:detekt-cli:${Versions.detekt}"
    const val detektApi = "io.gitlab.arturbosch.detekt:detekt-api:${Versions.detekt}"
    const val detektTest = "io.gitlab.arturbosch.detekt:detekt-test:${Versions.detekt}"
    const val customDetekt = "com.openreach.orion.customDetekt"
    // Test libraries
    const val kotest = "io.kotest:kotest-runner-junit5:${Versions.kotest}"
    const val kotestProperty = "io.kotest:kotest-property:${Versions.kotest}"
    const val kotestArrowAssertions = "io.kotest:kotest-assertions-arrow:${Versions.kotest}"
    const val kotestAssertions = "io.kotest:kotest-assertions-core:${Versions.kotest}"
    const val ktorServerTests = "io.ktor:ktor-server-tests:${Versions.ktor}"
    const val slf4jTest = "uk.org.lidalia:slf4j-test:${Versions.slf4jTest}"
    const val jsonAssert = "org.skyscreamer:jsonassert:${Versions.jsonAssert}"
    const val xmlUnitCore = "org.xmlunit:xmlunit-core:${Versions.xmlUnit}"
    const val xmlUnitAssertJ = "org.xmlunit:xmlunit-assertj:${Versions.xmlUnit}"
    const val assertJ = "org.assertj:assertj-core:${Versions.assertJ}"
}
